{"version":3,"sources":["actions/index.js","reducers/index.js","reducers/events.js","components/events_index.js","components/events_new.js","components/events_show.js","serviceWorker.js","index.js"],"names":["ROOT_URL","combineReducers","events","arguments","length","undefined","action","type","data","response","Object","objectSpread","defineProperty","id","_","mapKeys","form","EventsIndex","this","props","readEvents","map","event","react_default","a","createElement","Table","key","Link","to","concat","title","body","Fragment","FloatingActionButton_default","style","position","right","bottom","containerElement","add_default","displaySelectAll","adjustForCheckbox","displayRowCheckbox","renderEvents","Component","mapDispatchToProps","_ref","asyncToGenerator","regenerator_default","mark","_callee","dispatch","wrap","_context","prev","next","axios","get","sent","stop","_x","apply","connect","state","EventsNew","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onSubmit","bind","assertThisInitialized","field","input","label","_field$meta","meta","touched","error","TextField_default","assign","hindText","floatingLabelText","errorText","fullWidth","values","postEvent","history","push","_this$props","handleSubmit","pristine","submitting","invalid","margin","Field","name","component","renderField","RaisedButton_default","disabled","_ref2","_callee2","_context2","post","_x2","reduxForm","validate","errors","EventsShow","onDeleteClick","match","params","getEvent","deleteEvent","putEvent","onClick","_ref5","_callee5","_context5","delete","_x5","_ref4","_callee4","_context4","_x4","_ref3","_callee3","_context3","put","_x3","ownProps","initialValues","enableReinitialize","Boolean","window","location","hostname","enhancer","applyMiddleware","thunk","store","createStore","reducer","ReactDOM","render","MuiThemeProvider_default","es","BrowserRouter","Switch","Route","path","exact","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b2ff8b33.chunk.js","sourcesContent":["import axios from 'axios'\nexport const READ_EVENTS  = 'READ_EVENTS'\nexport const CREATE_EVENT = 'CREATE_EVENT'\nexport const READ_EVENT   = 'READ_EVENT'\nexport const UPDATE_EVENT = 'UPDATE_EVENT'\nexport const DELETE_EVENT = 'DELETE_EVENT'\n\nconst ROOT_URL = 'https://udemy-utils.herokuapp.com/api/v1'\nconst QUERYSTRING = '?token=token123'\n\nexport const readEvents = () => async dispatch => {\n  const response = await axios.get(`${ROOT_URL}/events${QUERYSTRING}`)\n  dispatch({ type: READ_EVENTS, response })\n}\n\nexport const postEvent = values => async dispatch => {\n  const response = await axios.post(`${ROOT_URL}/events${QUERYSTRING}`, values)\n  dispatch({ type: CREATE_EVENT, response })\n}\n\nexport const putEvent = values => async dispatch => {\n  const response = await axios.put(`${ROOT_URL}/events/${values.id}${QUERYSTRING}`, values)\n  dispatch({ type: UPDATE_EVENT, response })\n}\n\nexport const getEvent = id => async dispatch => {\n  const response = await axios.get(`${ROOT_URL}/events/${id}${QUERYSTRING}`)\n  dispatch({ type: READ_EVENT, response })\n}\n\nexport const deleteEvent = id => async dispatch => {\n  const response = await axios.delete(`${ROOT_URL}/events/${id}${QUERYSTRING}`)\n  dispatch({ type: DELETE_EVENT, id })\n}\n","import { combineReducers } from 'redux'\nimport { reducer as form } from 'redux-form'\nimport events from './events'\n\nexport default combineReducers({ events, form })\n","import _ from 'lodash'\nimport {\n  CREATE_EVENT,\n  READ_EVENTS,\n  READ_EVENT,\n  UPDATE_EVENT,\n  DELETE_EVENT\n} from '../actions'\n\nexport default (events = {}, action) => {\n  switch (action.type) {\n    case CREATE_EVENT:\n    case READ_EVENT:\n    case UPDATE_EVENT:\n      const data = action.response.data\n      return { ...events, [data.id]: data }\n    case READ_EVENTS:\n      return _.mapKeys(action.response.data, 'id')\n    case DELETE_EVENT:\n      delete events[action.id]\n      return { ...events }\n    default:\n      return events\n  }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { readEvents } from '../actions'\nimport _ from 'lodash'\nimport { Link } from 'react-router-dom'\nimport {\n  Table,\n  TableBody,\n  TableHeader,\n  TableHeaderColumn,\n  TableRow,\n  TableRowColumn\n} from 'material-ui/Table'\nimport FloatingActionButton from 'material-ui/FloatingActionButton'\nimport ContentAdd from 'material-ui/svg-icons/content/add'\n\nclass EventsIndex extends Component {\n  componentDidMount() {\n    this.props.readEvents()\n  }\n\n  renderEvents() {\n    return _.map(this.props.events, event => (\n      <TableRow key={event.id}>\n        <TableRowColumn>{event.id}</TableRowColumn>\n        <TableRowColumn>\n          <Link to={`/events/${event.id}`}>\n            {event.title}\n          </Link>\n        </TableRowColumn>\n        <TableRowColumn>{event.body}</TableRowColumn>\n      </TableRow>\n    ))\n  }\n\n  render() {\n    const style = {\n      position: 'fixed',\n      right: 12,\n      bottom: 12\n    }\n    return (\n      <React.Fragment>\n        <FloatingActionButton style={style} containerElement={<Link to=\"/events/new\" />}>\n          <ContentAdd />\n        </FloatingActionButton>\n        <Table>\n          <TableHeader\n            displaySelectAll={false}\n            adjustForCheckbox={false}\n          >\n            <TableRow>\n              <TableHeaderColumn>ID</TableHeaderColumn>\n              <TableHeaderColumn>Title</TableHeaderColumn>\n              <TableHeaderColumn>Body</TableHeaderColumn>\n            </TableRow>\n          </TableHeader>\n\n          <TableBody displayRowCheckbox={false}>\n            { this.renderEvents() }\n          </TableBody>\n        </Table>\n      </React.Fragment>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({ events: state.events })\n\nconst mapDispatchToProps = ({ readEvents })\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EventsIndex)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { Field, reduxForm } from 'redux-form'\nimport { Link } from 'react-router-dom'\nimport { postEvent } from '../actions'\nimport RaisedButton from 'material-ui/RaisedButton'\nimport TextField from 'material-ui/TextField'\n\nclass EventsNew extends Component {\n  constructor(props) {\n    super(props)\n    this.onSubmit = this.onSubmit.bind(this)\n  }\n\n  renderField(field) {\n    const { input, label, type, meta: { touched, error} } = field\n    return (\n      <TextField\n        hindText={label}\n        floatingLabelText={label}\n        type={type}\n        errorText={touched && error}\n        {...input}\n        fullWidth={true}\n      />\n    )\n  }\n\n  async onSubmit(values) {\n    await this.props.postEvent(values)\n    this.props.history.push('/')\n  }\n\n  render() {\n    const { handleSubmit, pristine, submitting, invalid } = this.props\n    const style = { margin: 12 }\n\n    return (\n      <form onSubmit={handleSubmit(this.onSubmit)}>\n        <div><Field label=\"Title\" name=\"title\" component={this.renderField} type=\"text\" /></div>\n        <div><Field label=\"Body\" name=\"body\" component={this.renderField} type=\"text\" /></div>\n        <RaisedButton label=\"Submit\" type=\"submit\" style={style} disabled={pristine || submitting || invalid} />\n        <RaisedButton label=\"Cancel\" style={style} containerElement={<Link to=\"/\" />} />\n      </form>\n    )\n  }\n}\n\nconst validate = values => {\n  const errors = {}\n\n  if (!values.title) errors.title = \"Enter a title, please.\"\n  if (!values.body) errors.body = \"Enter a body, please.\"\n\n  return errors\n}\n\nconst mapDispatchToProps = ({ postEvent })\n//export default connect(null, mapDispatchToProps)(EventsNew)\nexport default connect(null, mapDispatchToProps)(\n  reduxForm({ validate, form: 'eventNewForm' })(EventsNew)\n)\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { Field, reduxForm } from 'redux-form'\nimport { Link } from 'react-router-dom'\nimport { getEvent, deleteEvent, putEvent } from '../actions'\nimport RaisedButton from 'material-ui/RaisedButton'\nimport TextField from 'material-ui/TextField'\n\nclass EventsShow extends Component {\n  constructor(props) {\n    super(props)\n    this.onSubmit = this.onSubmit.bind(this)\n    this.onDeleteClick = this.onDeleteClick.bind(this)\n  }\n\n  componentDidMount() {\n    const { id } = this.props.match.params\n    if (id) this.props.getEvent(id)\n  }\n\n  renderField(field) {\n    const { input, label, type, meta: { touched, error} } = field\n    return (\n      <TextField\n        hindText={label}\n        floatingLabelText={label}\n        type={type}\n        errorText={touched && error}\n        {...input}\n        fullWidth={true}\n      />\n    )\n  }\n\n  async onDeleteClick() {\n    const id = this.props.match.params.id\n    await this.props.deleteEvent(id)\n    this.props.history.push('/')\n  }\n\n  async onSubmit(values) {\n    await this.props.putEvent(values)\n    this.props.history.push('/')\n  }\n\n  render() {\n    const { handleSubmit, pristine, submitting, invalid } = this.props\n    const style = { margin: 12 }\n\n    return (\n      <form onSubmit={handleSubmit(this.onSubmit)}>\n        <div><Field label=\"Title\" name=\"title\" component={this.renderField} type=\"text\" /></div>\n        <div><Field label=\"Body\" name=\"body\" component={this.renderField} type=\"text\" /></div>\n        <RaisedButton label=\"Submit\" type=\"submit\" style={style} disabled={pristine || submitting || invalid} />\n        <RaisedButton label=\"Cancel\" style={style} containerElement={<Link to=\"/\" />} />\n        <RaisedButton label=\"Delete\" style={style} onClick={this.onDeleteClick} />\n      </form>\n    )\n  }\n}\n\nconst validate = values => {\n  const errors = {}\n\n  if (!values.title) errors.title = \"Enter a title, please.\"\n  if (!values.body) errors.body = \"Enter a body, please.\"\n\n  return errors\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  const event = state.events[ownProps.match.params.id]\n  return { initialValues: event, event }\n}\nconst mapDispatchToProps = ({ deleteEvent, getEvent, putEvent })\nexport default connect(mapStateToProps, mapDispatchToProps)(\n  reduxForm({ validate, form: 'eventShowForm', enableReinitialize: true })(EventsShow)\n)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider'\n\nimport './index.css';\nimport reducer from './reducers'\nimport EventsIndex from './components/events_index';\nimport EventsNew from './components/events_new';\nimport EventsShow from './components/events_show';\nimport * as serviceWorker from './serviceWorker';\n\nconst enhancer = process.env.NODE_ENV === 'development' ?\n  composeWithDevTools(applyMiddleware(thunk)): applyMiddleware(thunk)\nconst store = createStore(reducer, enhancer)\n\nReactDOM.render(\n  <MuiThemeProvider>\n    <Provider store={store}>\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/events/new\" component={EventsNew} />\n          <Route path=\"/events/:id\" component={EventsShow} />\n          <Route exact path=\"/\" component={EventsIndex} />\n          <Route exact path=\"/events\" component={EventsIndex} />\n        </Switch>\n      </BrowserRouter>\n    </Provider>\n  </MuiThemeProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}